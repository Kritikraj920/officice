async processFile(file: Express.Multer.File, batchId: string): Promise<ProcessingResult> {
  try {
    const workbook = XLSX.read(file.buffer, {
      type: 'buffer',
      cellDates: true,
      dateNF: 'dd-mmm-yyyy'
    });

    const sheetsToProcess = ['g-sec', 'special'];
    let allRecords: any[] = [];

    // Step 1: Extract and parse both sheets
    for (const sheetNameKey of sheetsToProcess) {
      const sheetName = Object.keys(workbook.Sheets).find(
        name => name.toLowerCase() === sheetNameKey
      );

      if (!sheetName) {
        console.warn(`Sheet "${sheetNameKey}" not found.`);
        continue;
      }

      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, {
        header: 1,
        raw: false,
        dateNF: 'dd-mmm-yyyy'
      });

      const headerRowIndex = this.findHeaderRow(jsonData);
      if (headerRowIndex === -1) {
        console.warn(`Header row not found in "${sheetNameKey}" sheet.`);
        continue;
      }

      const headers = (jsonData[headerRowIndex] as string[]).map(h =>
        h ? h.toString().toLowerCase().trim() : ''
      );

      for (let i = headerRowIndex + 1; i < jsonData.length; i++) {
        const row = jsonData[i] as any[];
        if (!row || row.length === 0) continue;

        const record = this.mapRowToRecord(headers, row);
        if (record) {
          allRecords.push(record);
        }
      }
    }

    // Step 2: Clear old data for the batch
    await this.prisma.G_Sec.deleteMany({ where: { uploadBatchId: batchId } });

    // Step 3: Process and insert records
    let processedRecords = 0;
    let errorRecords = 0;

    for (const record of allRecords) {
      try {
        const processedRecord = this.processRecord(record, batchId);

        const existing = await this.prisma.G_Sec.findUnique({
          where: { isin: processedRecord.isin }
        });

        if (!existing) {
          await this.prisma.G_Sec.create({ data: processedRecord });
          processedRecords++;
        }
      } catch (error) {
        console.error('Error processing G_Sec record:', error);
        errorRecords++;
      }
    }

    return {
      totalRecords: allRecords.length,
      processedRecords,
      errorRecords
    };

  } catch (error) {
    console.error('Error processing IM Deal file:', error);
    throw error;
  }
}
